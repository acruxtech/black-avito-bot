from aiogram import types

from services.db.models import Deal


def get_admin_keyboard() -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        types.InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="user_settings"),
        types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="mailing"),
        types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics"),
        types.InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑", callback_data="export"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_back_to_admin_keyboard() -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_settings_keyboard() -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="–í–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data="job_settings"),
        types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–¥–µ–ª–∫—É –ø–æ id", callback_data="check_deal"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_user_settings_keyboard(is_shadow_ban: bool) -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="user_balance"),
        types.InlineKeyboardButton(text="–°–¥–µ–ª–∫–∏", callback_data="user_deals"),
        types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="user_message"),
        types.InlineKeyboardButton(text=f"{'–î–∞—Ç—å' if not is_shadow_ban else '–°–Ω—è—Ç—å'} —Ç–µ–Ω–µ–≤–æ–π –±–∞–Ω",
                                   callback_data="user_ban"),
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_profile_settings_keyboard(show_completed_deals: bool) -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text=f"{'–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å' if not show_completed_deals else '–°–∫—Ä—ã–≤–∞—Ç—å'} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏",
                                   callback_data="user_completed_deals"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_price_keyboard() -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="üí≤", callback_data="price_s"),
        types.InlineKeyboardButton(text="üí≤üí≤", callback_data="price_m"),
        types.InlineKeyboardButton(text="üí≤üí≤üí≤", callback_data="price_l"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_empty_keyboard() -> types.ReplyKeyboardRemove:
    return types.ReplyKeyboardRemove()


def get_job_settings_keyboard() -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="add_job"),
        types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="change_job"),
        types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="delete_job"),
        types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_registration_keyboard() -> types.ReplyKeyboardMarkup:
    keyboard = types.ReplyKeyboardMarkup()
    keyboard.resize_keyboard = True
    keyboard.row_width = 1
    keyboard.add(
        types.KeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüöÄ"),
    )
    return keyboard


def get_start_keyboard() -> types.ReplyKeyboardMarkup:
    keyboard = types.ReplyKeyboardMarkup()
    keyboard.resize_keyboard = True
    buttons = [
        types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—åüë§"),
        types.KeyboardButton(text="–£—Å–ª—É–≥–∏"),
        types.KeyboardButton(text="–°–¥–µ–ª–∫–∏"),
        types.KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
    ]
    keyboard.row_width = 2
    keyboard.add(*buttons)
    return keyboard


def get_profile_keyboard() -> types.ReplyKeyboardMarkup:
    keyboard = types.ReplyKeyboardMarkup()
    keyboard.resize_keyboard = True
    keyboard.row(
        types.KeyboardButton(text="–ö–æ—à–µ–ª–µ–∫"),
        types.KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
    )
    keyboard.add(
        types.KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–æ–≤–∞"),
    )
    keyboard.add(
        types.KeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥"),
    )
    return keyboard


def get_balance_keyboard() -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="refill"),
        types.InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"),
    ]
    keyboard.row_width = 2
    keyboard.add(*buttons)
    return keyboard


def get_user_type_keyboard() -> types.ReplyKeyboardMarkup:
    buttons = [
        types.KeyboardButton(text="–ó–∞–∫–∞–∑—á–∏–∫üõçÔ∏è"),
        types.KeyboardButton(text="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—åüë©‚Äçüíº"),
    ]
    keyboard = types.ReplyKeyboardMarkup()
    keyboard.resize_keyboard = True
    keyboard.row_width = 2
    keyboard.add(*buttons)
    return keyboard


def get_stop_mailing_keyboard(mailing_id: int) -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=f"stop_mailing_{mailing_id}")
    ]
    keyboard.add(*buttons)
    return keyboard


def get_cancel_keyboard(callback: str, text: str = '–û—Ç–º–µ–Ω–∏—Ç—å') -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text, callback_data=f'cancel_{callback}'),
    ]
    keyboard.add(*buttons)
    return keyboard


def get_mailing_keyboard() -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_mailing"),
        types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="delete_mailing"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*buttons)
    return keyboard


def get_apply_mailing_keyboard() -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_mailing"),
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="apply_mailing"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*buttons)
    return keyboard


def get_apply_user(user_id: int) -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"new_user_apply_{user_id}"),
        types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"new_user_decline_{user_id}"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 2
    keyboard.add(*buttons)
    return keyboard


def get_guarantee_keyboard() -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="–ú–æ–∏ —Å–¥–µ–ª–∫–∏", callback_data="my_deals"),
        types.InlineKeyboardButton(text="‚ûï–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_apply_deal_keyboard() -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="apply_creating_deal"),
        types.InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="create_again"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*buttons)
    return keyboard


def get_apply_deal_by_executor_keyboard(deal_id: int) -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã", callback_data=f"apply_deal_{deal_id}"),
        types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_deal_{deal_id}"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_deals_keyboard(deals: list[Deal]) -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text=f"id: {deal.id} ({'–≤ —Ä–∞–±–æ—Ç–µ' if not deal.is_completed else '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'})",
                                   callback_data=f"deal_{deal.id}")
        for deal in deals
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_deal_keyboard(deal: Deal, is_my_deal: bool, with_user_id: int) -> types.InlineKeyboardMarkup | None:
    if deal.is_completed:
        return

    buttons = []
    if is_my_deal:
        buttons.append(types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"end_deal_{deal.id}"))
    buttons.append(types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–µ", callback_data=f"anon_{with_user_id}"))
    buttons.append(types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="support_deal"))
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_approve_deal_keyboard(deal_id: int) -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"approve_end_deal_{deal_id}"),
        types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data=f"support_deal_{deal_id}")
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_rates_keyboard(rates) -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(rate.source, callback_data=f'—Åhoose_—Årypto_{rate.source}') for rate in rates
    ]
    keyboard.add(*buttons)
    return keyboard


def get_start_chat_keyboard(with_id: int) -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", callback_data=f'start_chat_{with_id}')
    ]
    keyboard.add(*buttons)
    return keyboard


def get_crypto_pending_keyboard() -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row = 1
    buttons = [
        types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç', callback_data='pay'),
    ]
    keyboard.add(*buttons)
    return keyboard


def get_check_crypto_keyboard(invoice_id) -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton("–ù–∞–∂–º–∏—Ç–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã", callback_data=f"crypto_invoice_{invoice_id}"),
    ]
    keyboard.add(*buttons)

    return keyboard


def get_tip_keyboard(executor_id: int) -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —á–∞–π", callback_data=f"tip_{executor_id}"),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_rating_keyboard(deal_id: int) -> types.InlineKeyboardMarkup:
    buttons = [
        types.InlineKeyboardButton(text=str(i), callback_data=f"rating_{i}_{deal_id}")
        for i in range(1, 6)
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(*buttons)
    return keyboard


def get_scroll_keyboard(
        back: str = "",
        additional_button: types.InlineKeyboardButton = None,
        forward: str = ""
    ) -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup()
    buttons = []
    if back:
        buttons.append(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=back))
    if additional_button:
        buttons.append(additional_button)
    if forward:
        buttons.append(types.InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data=forward))
    keyboard.add(*buttons)
    return keyboard
