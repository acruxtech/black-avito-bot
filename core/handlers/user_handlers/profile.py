import json
import time
from uuid import uuid4

import requests
from aiocryptopay.exceptions import CryptoPayAPIError, CodeErrorFactory
from aiocryptopay.const import Assets
from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery, Message
from bs4 import BeautifulSoup

from core.states.Profile import Profile
from core.states.Withdraw import Withdraw
from core.states.Refill import Refill
from core.utils.variables import crypto, lolz
from services.api.lolzapi import TooManyRequestsException
from services.db.services.repository import Repo
from services.paginator import Paginator
from config import load_config
from core.states.Registration import Registration
from core.utils.functions import *
from core.utils.keyboards import *
from core.utils.constants import *

logger = logging.getLogger(__name__)
config = load_config("config.ini")


async def registration(message: Message, state: FSMContext):
    await message.answer("–ù–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–í—ã –∑–∞–∫–∞–∑—á–∏–∫ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å?",
                         reply_markup=get_user_type_keyboard())

    await state.set_state(Registration.here_user_type)


async def registration_here_user_type(message: Message, repo: Repo, state: FSMContext):
    if message.text == "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—åü§ù":
        user = await repo.get_user_by_telegram_id(message.from_id)
        with open('settings.json', 'r') as file:
            data = json.load(file)
        start_payment = data["start_payment"]
        if start_payment > 0 and (user.is_paid is False or user.is_paid is None):
            if user.balance < start_payment:
                return await message.answer("–ß—Ç–æ–±—ã –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂. –û–Ω "
                                            "—Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è –≤ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏"
                                            "–≤–∞—à–∏—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."
                                            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, "
                                            f"–ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ ${data['start_payment']} –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            else:
                await message.answer(
                    "–ß—Ç–æ–±—ã –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂. –û–Ω "
                    "—Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è –≤ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏"
                    "–≤–∞—à–∏—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."
                    f"–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ ${data['start_payment']}. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
                )
        jobs = await repo.get_jobs()
        paginator = Paginator(
            data=[
                [InlineKeyboardButton(text=job.title, callback_data=f"job_{job.id}")]
                for job in jobs
            ],
            dp=Dispatcher.get_current(),
            state=Registration.here_job,
            size=10,
        )
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            reply_markup=paginator(),
        )
        await state.set_state(Registration.here_job)
    elif message.text == "–ó–∞–∫–∞–∑—á–∏–∫üõçÔ∏è":
        await repo.update_user(
            telegram_id=message.from_user.id,
            skills=None,
            price=None,
            job="",
            is_completed_registration=True,
            is_shadow_ban=True,
        )
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–£—Å–ª—É–≥–∏üíº'. –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –Ω–∞ "
                             "'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å' –º–æ–∂–Ω–æ –ø–æ–∑–¥–Ω–µ–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–æ—Ñ–∏–ª—åüë§'",
                             reply_markup=get_empty_keyboard())
        await state.finish()
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


async def registration_here_job(call: CallbackQuery, state: FSMContext):
    await call.answer()
    job_id = call.data.split("_")[-1]
    await state.update_data(job_id=job_id)
    await call.message.answer(
        "–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —É—Å–ª—É–≥—É –∏ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã",
        reply_markup=get_empty_keyboard(),
    )
    await state.set_state(Registration.here_skills)


async def registration_here_skills(message: Message, state: FSMContext):
    await state.update_data(skills=message.text)
    await message.answer(
        "–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ. –í—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–∞–∫–æ–π —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –≤–∞—à–∏ —É—Å–ª—É–≥–∏.",
        reply_markup=get_price_keyboard(),
    )
    await state.set_state(Registration.here_price)


async def registration_here_price(call: CallbackQuery, repo: Repo, state: FSMContext):
    await call.answer()

    data = await state.get_data()
    price = call.data.split("_")[-1]
    job = await repo.get_job_by_id(int(data["job_id"]))

    user = await repo.update_user(
        telegram_id=call.from_user.id,
        job=job.title,
        skills=data["skills"],
        price=PRICE_MAPPER[price],
        is_completed_registration=True,
        is_shadow_ban=True,
    )

    for admin in config.tg_bot.admin_ids:
        text = "<b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞</b>\n\n" + get_user_repr(user)
        await call.bot.send_message(
            chat_id=admin,
            text=text,
            parse_mode="html",
            reply_markup=get_apply_user(user.id),
        )

    await call.message.answer(
        text="–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è",
        reply_markup=get_start_keyboard()
    )

    await state.finish()


async def profile(message: Message, repo: Repo, state: FSMContext):
    await state.finish()

    user = await repo.get_user_by_telegram_id(message.from_id)

    if not user or not user.is_completed_registration:
        await message.answer(
            "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–¥–µ–ª—É \"–ü—Ä–æ—Ñ–∏–ª—åüë§\"",
            reply_markup=get_registration_keyboard(),
        )
        return

    if user.is_shadow_ban and user.skills:
        await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ª–∏–±–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ª–∏–±–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        return

    if user.job:
        deals = await repo.get_user_executor_completed_deals(user.id)
        text = get_user_repr(
            user,
            rating=get_user_rating(deals),
            summ=sum(deal.amount for deal in deals)
        )
    else:
        text = f"–ó–∞–∫–∞–∑—á–∏–∫ (–Ω–∏–∫–Ω–µ–π–º: <code>{user.name}</code>)"

    await message.answer(
        text=text,
        reply_markup=get_profile_keyboard(user.job is not None, user.is_highlight),
        parse_mode="html",
    )


async def promote_profile(message: Message, repo: Repo, state: FSMContext):
    me = await repo.get_user_by_telegram_id(message.from_id)
    competitors = await repo.get_users_where(
        job_id=int(me.job_id),
        price=me.price,
        is_shadow_ban=False,
    )
    max_priority = max(competitor.priority for competitor in competitors)
    summ = round(START_BET ** (max_priority + 1), 2)
    if summ < me.balance:
        await message.answer(
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ ${summ}. –°–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –∞–Ω–∫–µ—Ç—É?",
            reply_markup=get_promote_keyboard(),
        )
        await state.set_state(Profile.promote)
        await state.update_data(summ=summ)
    else:
        return await message.answer(
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ ${summ}. –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
        )


async def approve_promote_profile(call: CallbackQuery, repo: Repo, state: FSMContext):
    await call.answer()

    user = await repo.get_user_by_telegram_id(call.from_user.id)
    data = await state.get_data()
    await repo.update_user(user_id=user.id, priority=user.priority + 1, balance=user.balance - data["summ"])
    await call.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ª—É—á—à–µ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è")
    await state.finish()


async def highlight_profile(message: Message, repo: Repo, state: FSMContext):
    me = await repo.get_user_by_telegram_id(message.from_id)
    if HIGHLIGHT_PRICE < me.balance:
        await message.answer(
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ ${HIGHLIGHT_PRICE}. –°–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –≤—ã–¥–µ–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É?",
            reply_markup=get_highlight_keyboard(),
        )
        await state.set_state(Profile.highlight)
    else:
        return await message.answer(
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ ${HIGHLIGHT_PRICE}. –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
        )


async def approve_highlight_profile(call: CallbackQuery, repo: Repo, state: FSMContext):
    await call.answer()

    user = await repo.get_user_by_telegram_id(call.from_user.id)
    data = await state.get_data()
    await repo.update_user(user_id=user.id, is_highlight=True, balance=user.balance - HIGHLIGHT_PRICE)
    await call.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ª—É—á—à–µ –≤–∏–¥–Ω–∞")
    await state.finish()


async def settings_handler(message: Message, repo: Repo, state: FSMContext):
    await state.finish()
    me = await repo.get_user_by_telegram_id(message.from_id)

    await message.answer(
        text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è",
        reply_markup=get_profile_settings_keyboard(me.show_completed_deals),
    )


async def user_show_completed_deals(call: CallbackQuery, repo: Repo):
    me = await repo.get_user_by_telegram_id(call.from_user.id)
    prev_val = me.show_completed_deals

    await repo.update_user(telegram_id=me.telegram_id, show_completed_deals=not prev_val)
    with suppress(BaseException):
        await call.message.edit_reply_markup(
            reply_markup=get_profile_settings_keyboard(not prev_val)
        )
    await call.answer("–£—Å–ø–µ—à–Ω–æ")


async def balance_handler(message: Message, repo: Repo, state: FSMContext):
    await state.finish()
    me = await repo.get_user_by_telegram_id(message.from_id)

    await message.answer(
        text=f"–í–∞—à –±–∞–ª–∞–Ω—Å: <code>${round(me.balance, 3)}</code>",
        parse_mode="html",
        reply_markup=get_balance_keyboard(),
    )


async def refill(call: CallbackQuery, state: FSMContext):
    await state.finish()

    await call.answer()
    await call.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
        reply_markup=get_payment_methods_keyboard(),
    )
    await state.set_state(Refill.here_method)


async def refill_here_method(call: CallbackQuery, state: FSMContext):
    method = call.data.split("_")[-1]
    await state.update_data(method=method)
    if method == "cryptobot":
        await call.message.answer(
            text="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ @CryptoBot. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö. "
                 "–í–Ω–∏–º–∞–Ω–∏–µ, –º–æ–∂–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π!",
            parse_mode="html",
        )
    elif method == "lolz":
        res = requests.get("https://currencyapi.com/currency-conversion/usd-rub-1")
        usd_rate = None
        if res.status_code == 200:
            with suppress(BaseException):
                soup = BeautifulSoup(res.text, 'html.parser')
                divs = soup.find_all('div', class_='text-center mt-3')
                usd_rate = float(divs[1].text.strip().split()[0])
        if usd_rate is None:
            usd_rate = 100
        await state.update_data(usd_rate=usd_rate)
        await call.message.answer(
            text="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ https://lzt.market. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö. "
                 f"–ù–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –¥–æ–ª–ª–∞—Ä—ã –ø–æ –∫—É—Ä—Å—É <b>1USD = {round(usd_rate, 2)}RUB</b>\n"
                 "–í–Ω–∏–º–∞–Ω–∏–µ, –º–æ–∂–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π!",
            parse_mode="html",
        )
    await state.set_state(Refill.here_amount)
    await call.answer()


async def refill_here_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return

    data = await state.get_data()
    if data["method"] == "cryptobot":
        rates = await crypto.get_exchange_rates()
        rates = [rate for rate in rates if rate.source in Assets.values() and rate.target == 'USD']
        await message.answer(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã',
            reply_markup=get_rates_keyboard(rates),
            parse_mode='html'
        )
        await state.set_state(Refill.here_crypto)
        await state.update_data(pay_amount=amount)      # pay_amount - —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)
    elif data["method"] == "lolz":
        comment = int(time.time() * 100)
        lolz_username = config.lolz.username
        url = f"https://lzt.market/balance/transfer?username={lolz_username}&amount={amount}&comment={comment}"
        await message.answer(
            f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ, –∞ –∑–∞—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É\n"
            "<i>–í–ù–ò–ú–ê–ù–ò–ï! –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –∏–Ω–∞—á–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ —Å—á–µ—Ç!</i>",
            parse_mode="html",
            reply_markup=get_lolz_keyboard(url),
        )
        await state.set_state(Refill.pay)
        await state.update_data(amount=amount, pay_amount=round(amount / data["usd_rate"], 2), comment=comment)
        return


async def refill_here_crypto(call: CallbackQuery, state: FSMContext):
    await call.answer()

    curr = call.data.split('_')[-1]

    rates = await crypto.get_exchange_rates()         # get all rates
    rate = next(filter(lambda x: x.source == curr and x.target == 'USD', rates)).rate
    amount_pay_usd = (await state.get_data())["pay_amount"]
    amount_pay_crypto = amount_pay_usd / rate

    await call.message.edit_text(
        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {curr} –¥–ª—è –æ–ø–ª–∞—Ç—ã: {amount_pay_crypto}',
        reply_markup=get_crypto_pending_keyboard()
    )
    await state.update_data(curr=curr, amount=amount_pay_crypto, amount_usd=amount_pay_usd)
    await state.set_state(Refill.pay)


async def refill_here_crypto_pay(call: CallbackQuery, state: FSMContext):
    await call.answer()

    data = await state.get_data()

    try:
        invoice = await crypto.create_invoice(data["amount"], data["curr"])
    except CryptoPayAPIError | CodeErrorFactory:
        await call.message.answer("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞.")
        await state.finish()
        return
    await call.message.edit_text(
        f"–°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã: {invoice.bot_invoice_url}",
        reply_markup=get_check_crypto_keyboard(invoice.invoice_id)
    )


async def refill_here_lolz_pay(call: CallbackQuery, repo: Repo, state: FSMContext):
    data = await state.get_data()

    try:
        payments = lolz.market_payments(
            type_='income',
            pmin=data["amount"],
            pmax=data["amount"],
            comment=data["comment"],
        )["payments"]

    except TooManyRequestsException as e:
        await call.answer('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return

    if not payments:
        await call.answer('–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç! –û–ø–ª–∞—Ç–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return

    me = await repo.get_user_by_telegram_id(call.from_user.id)
    await repo.update_user(
        telegram_id=call.from_user.id,
        balance=me.balance + data["pay_amount"],
    )

    await call.message.edit_text(
        f"<b>–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É <code>${data['pay_amount']}</code>.\n"
        f"–ß–µ–∫: <code>#{data['comment']}</code></b>",
        parse_mode="html",
    )
    await state.finish()
    await call.answer()


async def refill_crypto_check(call: CallbackQuery, repo: Repo, state: FSMContext):
    data = await state.get_data()

    invoice_id = call.data.split('_')[-1]
    invoice = (await crypto.get_invoices(invoice_ids=invoice_id))[0]

    if invoice.status == 'paid':
        me = await repo.get_user_by_telegram_id(call.from_user.id)
        amount = data["amount_usd"]
        await repo.update_user(
            telegram_id=call.from_user.id,
            balance=me.balance + amount,
        )

        await call.message.edit_text(
            f"<b>–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É <code>${amount}</code>.\n"
            f"–ß–µ–∫: <code>#{invoice_id}</code></b>",
            parse_mode="html",
        )
        await state.finish()
        await call.answer()
        return

    if invoice.status == 'active':
        await call.answer('–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç! –û–ø–ª–∞—Ç–∏–ª–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
    elif invoice.status == 'expired':
        await call.message.edit_text("<b>–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –≤—ã—à–ª–æ. –ü–ª–∞—Ç—ë–∂ –±—ã–ª —É–¥–∞–ª—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>")
        await call.answer()


async def withdraw(call: CallbackQuery, state: FSMContext):
    await state.finish()

    await call.answer()
    await call.message.answer(
        text="–í—ã–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤ @CryptoBot. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö. "
             "–í–Ω–∏–º–∞–Ω–∏–µ, –º–æ–∂–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π!",
        parse_mode="html",
    )
    await state.set_state(Withdraw.here_amount)


async def withdraw_here_amount(message: Message, repo: Repo, state: FSMContext):
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return

    me = await repo.get_user_by_telegram_id(message.from_id)
    if amount > me.balance:
        await message.answer("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return

    rates = await crypto.get_exchange_rates()
    rates = [rate for rate in rates if rate.source in Assets.values() and rate.target == 'USD']
    await message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞',
        reply_markup=get_rates_keyboard(rates),
        parse_mode='html'
    )
    await state.set_state(Withdraw.here_crypto)
    await state.update_data(withdraw_amount=amount)


async def withdraw_here_crypto(call: CallbackQuery, state: FSMContext):
    await call.answer()

    curr = call.data.split('_')[-1]

    rates = await crypto.get_exchange_rates()         # get all rates
    rate = next(filter(lambda x: x.source == curr and x.target == 'USD', rates)).rate
    amount_withdraw_usd = (await state.get_data())["withdraw_amount"]
    amount_withdraw_crypto = amount_withdraw_usd / rate

    try:
        await crypto.transfer(
            user_id=call.from_user.id,
            asset=curr,
            amount=amount_withdraw_crypto,
            spend_id=str(uuid4()),
        )
    except CodeErrorFactory as e:
        logger.error(e)
        await call.message.answer("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        await state.finish()
        return

    await call.message.edit_text('–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –Ω–∞ —Å—á–µ—Ç –≤ @CryptoBot', reply_markup=None)
    await state.finish()


def register_user_profile_handlers(dp: Dispatcher):
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    dp.register_message_handler(registration, Text(["–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüìù", "–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–æ–≤–∞üîÑ"]), state="*")
    dp.register_message_handler(registration_here_user_type, state=Registration.here_user_type)
    dp.register_callback_query_handler(registration_here_job, Text(startswith="job"), state=Registration.here_job)
    dp.register_message_handler(registration_here_skills, state=Registration.here_skills)
    dp.register_callback_query_handler(registration_here_price, Text(startswith="price"), state=Registration.here_price)

    # –º–µ–Ω—é
    dp.register_message_handler(profile, Text("–ü—Ä–æ—Ñ–∏–ª—åüë§"), state="*")
    dp.register_message_handler(balance_handler, Text("–ö–æ—à–µ–ª–µ–∫üí≥"), state="*")
    dp.register_message_handler(settings_handler, Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"), state="*")
    dp.register_callback_query_handler(user_show_completed_deals, Text("user_completed_deals"), state="*")
    dp.register_message_handler(promote_profile, Text("–ü—Ä–æ–¥–≤–∏–≥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìà"), state="*")
    dp.register_callback_query_handler(approve_promote_profile, Text("promote_profile"), state=Profile.promote)
    dp.register_message_handler(highlight_profile, Text("–í—ã–¥–µ–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É‚ú®"), state="*")
    dp.register_callback_query_handler(approve_highlight_profile, Text("highlight_profile"), state=Profile.highlight)

    # refill
    dp.register_callback_query_handler(refill, Text("refill"), state="*")
    dp.register_callback_query_handler(refill_here_method, Text(startswith="paymentmethod"), state=Refill.here_method)
    dp.register_message_handler(refill_here_amount, state=Refill.here_amount)
    dp.register_callback_query_handler(refill_here_crypto, Text(startswith="—Åhoose_—Årypto"), state=Refill.here_crypto)
    dp.register_callback_query_handler(refill_here_crypto_pay, Text(startswith="pay"), state=Refill.pay)
    dp.register_callback_query_handler(refill_crypto_check, Text(startswith="crypto_invoice"), state=Refill.pay)
    dp.register_callback_query_handler(refill_here_lolz_pay, Text(startswith="lolz_invoice"), state=Refill.pay)

    # withdraw
    dp.register_callback_query_handler(withdraw, Text("withdraw"), state="*")
    dp.register_message_handler(withdraw_here_amount, state=Withdraw.here_amount)
    dp.register_callback_query_handler(withdraw_here_crypto, Text(startswith="—Åhoose_—Årypto"),
                                       state=Withdraw.here_crypto)
